eth.accounts
eth.getBlock()
eth.getBlock(0)
eth.getBlock(1)
eth.blockNumber
admin.nodeInfo
net.peerCount
eth.accounts
eth.getBalance(0x0a9a494149166d404b998e4a09cae814a88fce35)
eth.getBalance("0x0a9a494149166d404b998e4a09cae814a88fce35")
eth.accounts
eth.coinbase
miner.start(1)
eth.blockNumbers
eth.blockNumbers()
eth.blockNumber
miner.stop()
eth.coinbase
eth.getBalance("0x0a9a494149166d404b998e4a09cae814a88fce35")
net.peerCount
eth.accounts
eth.coinbase
eth.getBalance(eth.accounts[1])
amount = web3.toWei(10, 'ether')
eth.sendTransaction({from:eth.accounts[0], to:eth.accounts[1], value: amount})
eth.getBalance(eth.accounts[1])
txpool.status
miner.start(1);admin.sleepBlocks(1);miner.stop();
txpool.status
eth.getBalance(eth.accounts[1])
eth.blockNumber
eth.getBlock(66)
eth.getBlock(46)
eth.getBlock(47)
eth.getTransaction("0x3c55654fbe0221cb09c225e816c1d28e85e749ba49c6bda3e6036103714cdd48")
eth.accounts
code = "0x608060405234801561001057600080fd5b5060c58061001f6000396000f3006080604052600436              10603f576000357c01000000000000000000000000000000000000000000000000000000009004              63ffffffff168063165c4a16146044575b600080fd5b348015604f57600080fd5b506076600480              3603810190808035906020019092919080359060200190929190505050608c565b604051808281              5260200191505060405180910390f35b60008183029050929150505600a165627a7a72305820be              a8811811016b9e0242d6f1c49d3b19c19f16c780e8653205966837777389430029"
abi = [{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":              "uint256"}],"name":"multiply","outputs":[{"name":"","type":"uint256"}],"payabl              e":false,"stateMutability":"nonpayable","type":"function"}]
myContract = eth.contract(abi)
contract = myContract.new({from:eth.accounts[0],data:code,gas:1000000})
Error: invalid argument 0: json: cannot unmarshal invalid hex string into Go struct field SendTxArgs.data of type hexutil.Bytes
code
code = "0x608060405234801561001057600080fd5b5060c58061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063165c4a16146044575b600080fd5b348015604f57600080fd5b5060766004803603810190808035906020019092919080359060200190929190505050608c565b6040518082815260200191505060405180910390f35b60008183029050929150505600a165627a7a72305820bea8811811016b9e0242d6f1c49d3b19c19f16c780e8653205966837777389430029"
abi = [{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"multiply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]
myContract = eth.contract(abi)
contract = myContract.new({from:eth.accounts[0],data:code,gas:1000000})
txpool.status
miner.start(1);admin.sleepBlocks(1);miner.stop();
txpool.status
contract.multiply.sendTransaction(2, 4, {from:eth.accounts[0]})
txpool.status
txpool
miner.start(1);admin.sleepBlocks(1);miner.stop();
eth.blockNumber
eth.getBlock(48)
eth.getTransaction("0x341364326f3102a03da17f6deed4809a74b7d57d1adf0016a07a825173d84462")
eth.getBlock(49)
eth.getTransaction("0x0528d5dfac6df325551874531dc68be1bed8c254502a062b86da36f8818de7e7"]
)
eth.getBlock(49)
eth.getTransaction("0x0528d5dfac6df325551874531dc68be1bed8c254502a062b86da36f8818de7e7")